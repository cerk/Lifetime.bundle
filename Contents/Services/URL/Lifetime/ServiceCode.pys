import re

NAMESPACES = {'smil': 'http://www.w3.org/2005/SMIL21/Language'}
ICON = 'icon-default.png'

####################################################################################################
def NormalizeURL(url):

    # Not sure if this is actually needed.
    return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

    html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
      
    title_plus = html.xpath('//meta[@property="og:title"]')[0].get('content')
    title_plus_splits = title_plus.split(' - ')
    title = title_plus_splits[0]
    show = title_plus_splits[1].split(' Full Episodes ')[0]
    summary = html.xpath('//meta[@property="og:description"]')[0].get('content')
    thumbs = html.xpath('//meta[@property="og:image"]')
    thumb = thumbs[len(thumbs) - 1].get('content')
    url = html.xpath('//meta[@property="og:url"]')[0].get('content')
    season = None
    season_match = re.search(r'/season-(\d+)/', url)
    if season_match:
        season = int(season_match.group(1))
    originally_available_at = None
    
    for script in html.xpath('//script[@type="text/javascript"]'):
        text = HTML.StringFromElement(script)
        date_match = re.search(r'"original_air_date":"([^"]+)"', text)
        if date_match:            
            try:
                air_date = date_match.group(1)
                originally_available_at = Datetime.ParseDate(air_date).date()
            except:
                originally_available_at = None
            break
          
    return EpisodeObject(
        show = show,
        season = season,        
        title = title,
        summary = summary,
        thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback=R(ICON)),
        originally_available_at = originally_available_at
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        # Because we are using webkit, only one choice now.
        MediaObject(
            parts = [PartObject(key = WebVideoURL(url))],
            audio_channels = 2
        )
    ]
